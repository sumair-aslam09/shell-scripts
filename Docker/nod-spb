[10:28 AM] Vagdevi Bhaskarabhatla

# Use an official OpenJDK runtime as the base image

FROM openjdk:11

 

# Set the working directory inside the container

WORKDIR /app

 

# Copy the executable JAR file to the container

COPY target/myapp.jar myapp.jar

 

# Expose the port your Spring Boot application listens on

EXPOSE 8080

 

# Specify the command to run your Spring Boot application

CMD ["java", "-jar", "myapp.jar"]


[10:28 AM] Vagdevi Bhaskarabhatla

In this example, we start with the official OpenJDK 11 base image. The working directory is set to /app.

The COPY instruction copies the executable JAR file (in this case, named myapp.jar) to the container's working directory. Make sure to adjust the COPY command according to your project's structure and the name of your JAR file.

The EXPOSE instruction exposes port 8080, assuming that's the port your Spring Boot application listens on. Modify it if your application uses a different port.

Finally, the CMD instruction specifies the command to run your Spring Boot application. In this case, it runs the JAR file using the java -jar command, followed by the name of the JAR file.

You can save this file as Dockerfile in the root directory of your Spring Boot application and build the Docker image using the docker build command.

[10:29 AM] Sumair Mohammad

docker tag app 78160/app

docker push 78160/app
