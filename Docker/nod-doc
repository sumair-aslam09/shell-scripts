# Use an official Node.js runtime as the base image
FROM node:14

 

# Set the working directory inside the container
WORKDIR /usr/src/app

 

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

 

# Install application dependencies
RUN npm install

 

# Copy the application code to the working directory
COPY . .

 

# Expose the port your Node.js application listens on
EXPOSE 3000

 

# Specify the command to run your Node.js application
CMD [ "node", "app.js" ]


In this example, we start with the official Node.js 14 base image. The working directory is set to /usr/src/app, and we copy the package.json and package-lock.json files to the container's working directory. Next, we run npm install to install the application dependencies.

After that, we copy the entire application code to the working directory. Adjust the COPY command according to your project's structure.

The EXPOSE instruction exposes port 3000, assuming that's the port your Node.js application listens on.

Finally, the CMD instruction specifies the command to run your Node.js application. In this case, it assumes your entry point file is named app.js, but you should modify it according to your project.

You can save this file as Dockerfile in the root directory of your Node.js application and build the Docker image using the docker build command.
